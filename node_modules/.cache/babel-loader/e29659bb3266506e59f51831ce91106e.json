{"ast":null,"code":"import TMDB, { KEY } from \"../apis/TMDB\"; //Import baseURL & API Key\n\nimport history from \"../history\"; //action creators are used to create actions with a payload of the data from the API request\n//this is then dispatched to the reducers for State Management in the Redux Store\n//action creator\n//Applying redux-thunk to action creator that is async await to request API\n\nexport const fetchMovies = searchTerm => async dispatch => {\n  const response = await TMDB.get(`/search/multi?api_key=${KEY}&query=${searchTerm}`);\n  dispatch({\n    type: \"FETCH_MOVIES\",\n    payload: response.data\n  });\n  history.push(`/list/search/results/${searchTerm}`);\n}; //action creator\n//Creates an action with a payload that is the changed input\n\nexport const onInputChange = searchTerm => {\n  //connect function in component will handle dispatch of this action\n  return {\n    type: \"ON_INPUT_CHANGE\",\n    payload: searchTerm\n  };\n}; //action creator\n//Creates an action with a payload of the trending movie data from the API request\n//does not dispatch action until API data has been loaded\n\nexport const fetchTrending = () => async dispatch => {\n  const response = await TMDB.get(`/trending/movie/day?api_key=${KEY}`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_TRENDING\",\n    payload: response.data\n  });\n}; //action creator\n//Creates an action with a payload of upcoming movie data from the API request\n//does not dispatch action until API data has been loaded\n\nexport const fetchUpcoming = () => async dispatch => {\n  const response = await TMDB.get(`/movie/upcoming?api_key=${KEY}`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_UPCOMING\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchMovieDetails = id => async dispatch => {\n  const response = await TMDB.get(`/movie/${id}?api_key=${KEY}`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_MOVIE_DETAILS\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchCredits = id => async dispatch => {\n  const response = await TMDB.get(`/movie/${id}/credits?api_key=${KEY}\n      `); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_CREDITS\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchTopRated = () => async dispatch => {\n  const response = await TMDB.get(`https://api.themoviedb.org/3/movie/top_rated?api_key=${KEY}&language=en-US&page=1`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_TOP_RATED\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchNowPlaying = () => async dispatch => {\n  const response = await TMDB.get(`/movie/now_playing?api_key=${KEY}&language=en-US&page=1`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_NOW_PLAYING\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchPopular = () => async dispatch => {\n  const response = await TMDB.get(`/movie/popular?api_key=${KEY}&language=en-US&page=1`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_POPULAR\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchTrailers = id => async dispatch => {\n  const response = await TMDB.get(`/movie/${id}/videos?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_TRAILERS\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchSimilarMovies = id => async dispatch => {\n  const response = await TMDB.get(`/movie/${id}/similar?api_key=${KEY}`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_SIMILAR_MOVIES\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchGenres = () => async dispatch => {\n  const response = await TMDB.get(`/genre/movie/list?api_key=${KEY}\n  `); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_GENRES\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchActor = id => async dispatch => {\n  const response = await TMDB.get(`/person/${id}?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_ACTOR\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchActorMovies = id => async dispatch => {\n  const response = await TMDB.get(`/person/${id}/movie_credits?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_ACTOR_MOVIES\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchTvPopular = () => async dispatch => {\n  const response = await TMDB.get(`/tv/popular?api_key=${KEY}&language=en-US&page=1\n  `); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_TV_POPULAR\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchTvTopRated = () => async dispatch => {\n  const response = await TMDB.get(`/tv/top_rated?api_key=${KEY}&language=en-US&page=1\n    `); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_TV_TOP_RATED\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchTvAiringToday = () => async dispatch => {\n  const response = await TMDB.get(`/tv/airing_today?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_TV_AIRING_TODAY\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchTvOnAir = () => async dispatch => {\n  const response = await TMDB.get(`/tv/on_the_air?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_TV_ON_AIR\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchTvTrending = () => async dispatch => {\n  const response = await TMDB.get(`/trending/tv/day?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_TV_TRENDING\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchShowDetails = id => async dispatch => {\n  const response = await TMDB.get(`/tv/${id}?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_SHOW_DETAILS\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchShowVideos = id => async dispatch => {\n  const response = await TMDB.get(`/tv/${id}/videos?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_SHOW_VIDEOS\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchShowCredits = id => async dispatch => {\n  const response = await TMDB.get(`tv/${id}/credits?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_SHOW_CREDITS\",\n    payload: response.data\n  });\n}; //action creator\n\nexport const fetchShowSimilar = id => async dispatch => {\n  const response = await TMDB.get(`/tv/${id}/recommendations?api_key=${KEY}&language=en-US`); //dispatches action to matching type reducer\n\n  dispatch({\n    type: \"FETCH_SHOW_SIMILAR\",\n    payload: response.data\n  });\n}; //creat token\n//create token for approval by user\n//this will be invoked in the sign in component\n\nexport const createSignInToken = () => async (dispatch, getState) => {\n  const response = await TMDB.get(`/authentication/token/new?api_key=${KEY}`); //dispatches action to matching type reducer\n\n  await dispatch({\n    type: \"CREATE_SIGN_IN_TOKEN\",\n    payload: response.data.request_token\n  }); //store token locally for redirect back to /user/approval\n\n  localStorage.setItem(\"token\", getState().signInToken);\n  console.log(localStorage.getItem(\"token\")); //go to the TMDB website with token to get user approval\n  //redirect to TMDB site then redirect back to film flix\n\n  window.location.replace(`https://www.themoviedb.org/authenticate/${getState().signInToken}?redirect_to=http://192.168.0.13:3000/user/approval`);\n}; //sign in\n//create a session after token has been approved\n//this will be invoked in the approval component\n//session id will be used to get user account information\n\nexport const createSignInSession = () => async (dispatch, getState) => {\n  //when the token is approved use the token to create a new session to access user account\n  const response = await TMDB.post(`/authentication/session/new?api_key=${KEY}`, //user local storage to access token after redirecting back to film flix from TMDB\n  {\n    request_token: localStorage.getItem(\"token\")\n  });\n  await dispatch({\n    type: \"CREATE_SIGN_IN_SESSION\",\n    payload: response.data.session_id\n  }); //store session id so refreshing site does not prevent sign out or loss of data\n\n  localStorage.setItem(\"session\", getState().signInSession); //navigate to /user/account\n\n  history.push(\"/user/account\");\n  console.log(getState().signInSession);\n}; //sign out\n//this will delete the user session basically signing out\n\nexport const deleteSignOutSession = () => async (dispatch, getState) => {\n  const response = await TMDB.delete(`/authentication/session?api_key=${KEY}\n  `, {\n    //use local storage to retrieve session id in case of refresh\n    data: {\n      session_id: localStorage.getItem(\"session\")\n    }\n  }); //remove local storage of session id for sign out\n\n  localStorage.removeItem(\"session\");\n  localStorage.removeItem(\"token\");\n  await dispatch({\n    type: \"DELETE_SIGN_OUT_SESSION\",\n    payload: response.data\n  }); //we can also use getState to get the session id from the state\n\n  console.log(getState().signOutSession);\n}; //fetch account details\n//we are using the session id that was created earlier by signing in to get user account information\n\nexport const fetchAccountDetails = () => async (dispatch, getState) => {\n  const response = await TMDB.get( //use local storage to retrieve session id in case of refresh\n  `/account?api_key=${KEY}&session_id=${localStorage.getItem(\"session\")}\n  `);\n  await dispatch({\n    type: \"FETCH_ACCOUNT_DETAILS\",\n    payload: response.data\n  }); //we can also use getState to get the session id from the state\n\n  console.log(getState().accountDetails);\n};\n/*\n//fetch favorite movies\nexport const fetchFavoriteMovies = () => async (dispatch, getState) => {\n  const response = await TMDB.get(\n    //use local storage to retrieve session id in case of refresh\n    `/account/${account}/favorite/movies?api_key=80f9558ee00fbe6653d7ee77b88e6eeb&session_id=session&language=en-US\n  `,\n  );\n\n  await dispatch({\n    type: \"FETCH_ACCOUNT_DETAILS\",\n    payload: response.data,\n  });\n\n  //we can also use getState to get the session id from the state\n  console.log(getState().signInSession);\n};*/","map":{"version":3,"sources":["/Users/cedrickmonesit/Desktop/movie-app/src/actions/index.js"],"names":["TMDB","KEY","history","fetchMovies","searchTerm","dispatch","response","get","type","payload","data","push","onInputChange","fetchTrending","fetchUpcoming","fetchMovieDetails","id","fetchCredits","fetchTopRated","fetchNowPlaying","fetchPopular","fetchTrailers","fetchSimilarMovies","fetchGenres","fetchActor","fetchActorMovies","fetchTvPopular","fetchTvTopRated","fetchTvAiringToday","fetchTvOnAir","fetchTvTrending","fetchShowDetails","fetchShowVideos","fetchShowCredits","fetchShowSimilar","createSignInToken","getState","request_token","localStorage","setItem","signInToken","console","log","getItem","window","location","replace","createSignInSession","post","session_id","signInSession","deleteSignOutSession","delete","removeItem","signOutSession","fetchAccountDetails","accountDetails"],"mappings":"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","sourcesContent":["import TMDB, { KEY } from \"../apis/TMDB\"; //Import baseURL & API Key\nimport history from \"../history\";\n\n//action creators are used to create actions with a payload of the data from the API request\n//this is then dispatched to the reducers for State Management in the Redux Store\n\n//action creator\n//Applying redux-thunk to action creator that is async await to request API\nexport const fetchMovies = (searchTerm) => async (dispatch) => {\n  const response = await TMDB.get(\n    `/search/multi?api_key=${KEY}&query=${searchTerm}`,\n  );\n\n  dispatch({ type: \"FETCH_MOVIES\", payload: response.data });\n  history.push(`/list/search/results/${searchTerm}`);\n};\n\n//action creator\n//Creates an action with a payload that is the changed input\nexport const onInputChange = (searchTerm) => {\n  //connect function in component will handle dispatch of this action\n  return {\n    type: \"ON_INPUT_CHANGE\",\n    payload: searchTerm,\n  };\n};\n\n//action creator\n//Creates an action with a payload of the trending movie data from the API request\n//does not dispatch action until API data has been loaded\nexport const fetchTrending = () => async (dispatch) => {\n  const response = await TMDB.get(`/trending/movie/day?api_key=${KEY}`);\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_TRENDING\", payload: response.data });\n};\n\n//action creator\n//Creates an action with a payload of upcoming movie data from the API request\n//does not dispatch action until API data has been loaded\nexport const fetchUpcoming = () => async (dispatch) => {\n  const response = await TMDB.get(`/movie/upcoming?api_key=${KEY}`);\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_UPCOMING\", payload: response.data });\n};\n\n//action creator\nexport const fetchMovieDetails = (id) => async (dispatch) => {\n  const response = await TMDB.get(`/movie/${id}?api_key=${KEY}`);\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_MOVIE_DETAILS\", payload: response.data });\n};\n\n//action creator\nexport const fetchCredits = (id) => async (dispatch) => {\n  const response = await TMDB.get(\n    `/movie/${id}/credits?api_key=${KEY}\n      `,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_CREDITS\", payload: response.data });\n};\n\n//action creator\nexport const fetchTopRated = () => async (dispatch) => {\n  const response = await TMDB.get(\n    `https://api.themoviedb.org/3/movie/top_rated?api_key=${KEY}&language=en-US&page=1`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_TOP_RATED\", payload: response.data });\n};\n\n//action creator\nexport const fetchNowPlaying = () => async (dispatch) => {\n  const response = await TMDB.get(\n    `/movie/now_playing?api_key=${KEY}&language=en-US&page=1`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_NOW_PLAYING\", payload: response.data });\n};\n\n//action creator\nexport const fetchPopular = () => async (dispatch) => {\n  const response = await TMDB.get(\n    `/movie/popular?api_key=${KEY}&language=en-US&page=1`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_POPULAR\", payload: response.data });\n};\n\n//action creator\nexport const fetchTrailers = (id) => async (dispatch) => {\n  const response = await TMDB.get(\n    `/movie/${id}/videos?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_TRAILERS\", payload: response.data });\n};\n\n//action creator\nexport const fetchSimilarMovies = (id) => async (dispatch) => {\n  const response = await TMDB.get(`/movie/${id}/similar?api_key=${KEY}`);\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_SIMILAR_MOVIES\", payload: response.data });\n};\n\n//action creator\nexport const fetchGenres = () => async (dispatch) => {\n  const response = await TMDB.get(`/genre/movie/list?api_key=${KEY}\n  `);\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_GENRES\", payload: response.data });\n};\n\n//action creator\nexport const fetchActor = (id) => async (dispatch) => {\n  const response = await TMDB.get(\n    `/person/${id}?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_ACTOR\", payload: response.data });\n};\n\n//action creator\nexport const fetchActorMovies = (id) => async (dispatch) => {\n  const response = await TMDB.get(\n    `/person/${id}/movie_credits?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_ACTOR_MOVIES\", payload: response.data });\n};\n\n//action creator\nexport const fetchTvPopular = () => async (dispatch) => {\n  const response = await TMDB.get(`/tv/popular?api_key=${KEY}&language=en-US&page=1\n  `);\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_TV_POPULAR\", payload: response.data });\n};\n\n//action creator\nexport const fetchTvTopRated = () => async (dispatch) => {\n  const response = await TMDB.get(\n    `/tv/top_rated?api_key=${KEY}&language=en-US&page=1\n    `,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_TV_TOP_RATED\", payload: response.data });\n};\n\n//action creator\nexport const fetchTvAiringToday = () => async (dispatch) => {\n  const response = await TMDB.get(\n    `/tv/airing_today?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_TV_AIRING_TODAY\", payload: response.data });\n};\n\n//action creator\nexport const fetchTvOnAir = () => async (dispatch) => {\n  const response = await TMDB.get(\n    `/tv/on_the_air?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_TV_ON_AIR\", payload: response.data });\n};\n\n//action creator\nexport const fetchTvTrending = () => async (dispatch) => {\n  const response = await TMDB.get(\n    `/trending/tv/day?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_TV_TRENDING\", payload: response.data });\n};\n\n//action creator\nexport const fetchShowDetails = (id) => async (dispatch) => {\n  const response = await TMDB.get(`/tv/${id}?api_key=${KEY}&language=en-US`);\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_SHOW_DETAILS\", payload: response.data });\n};\n\n//action creator\nexport const fetchShowVideos = (id) => async (dispatch) => {\n  const response = await TMDB.get(\n    `/tv/${id}/videos?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_SHOW_VIDEOS\", payload: response.data });\n};\n\n//action creator\nexport const fetchShowCredits = (id) => async (dispatch) => {\n  const response = await TMDB.get(\n    `tv/${id}/credits?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_SHOW_CREDITS\", payload: response.data });\n};\n\n//action creator\nexport const fetchShowSimilar = (id) => async (dispatch) => {\n  const response = await TMDB.get(\n    `/tv/${id}/recommendations?api_key=${KEY}&language=en-US`,\n  );\n\n  //dispatches action to matching type reducer\n  dispatch({ type: \"FETCH_SHOW_SIMILAR\", payload: response.data });\n};\n\n//creat token\n//create token for approval by user\n//this will be invoked in the sign in component\nexport const createSignInToken = () => async (dispatch, getState) => {\n  const response = await TMDB.get(`/authentication/token/new?api_key=${KEY}`);\n\n  //dispatches action to matching type reducer\n  await dispatch({\n    type: \"CREATE_SIGN_IN_TOKEN\",\n    payload: response.data.request_token,\n  });\n\n  //store token locally for redirect back to /user/approval\n  localStorage.setItem(\"token\", getState().signInToken);\n\n  console.log(localStorage.getItem(\"token\"));\n\n  //go to the TMDB website with token to get user approval\n  //redirect to TMDB site then redirect back to film flix\n  window.location.replace(\n    `https://www.themoviedb.org/authenticate/${\n      getState().signInToken\n    }?redirect_to=http://192.168.0.13:3000/user/approval`,\n  );\n};\n\n//sign in\n//create a session after token has been approved\n//this will be invoked in the approval component\n//session id will be used to get user account information\nexport const createSignInSession = () => async (dispatch, getState) => {\n  //when the token is approved use the token to create a new session to access user account\n  const response = await TMDB.post(\n    `/authentication/session/new?api_key=${KEY}`,\n    //user local storage to access token after redirecting back to film flix from TMDB\n    { request_token: localStorage.getItem(\"token\") },\n  );\n\n  await dispatch({\n    type: \"CREATE_SIGN_IN_SESSION\",\n    payload: response.data.session_id,\n  });\n\n  //store session id so refreshing site does not prevent sign out or loss of data\n  localStorage.setItem(\"session\", getState().signInSession);\n\n  //navigate to /user/account\n  history.push(\"/user/account\");\n\n  console.log(getState().signInSession);\n};\n\n//sign out\n//this will delete the user session basically signing out\nexport const deleteSignOutSession = () => async (dispatch, getState) => {\n  const response = await TMDB.delete(\n    `/authentication/session?api_key=${KEY}\n  `,\n    {\n      //use local storage to retrieve session id in case of refresh\n      data: { session_id: localStorage.getItem(\"session\") },\n    },\n  );\n  //remove local storage of session id for sign out\n  localStorage.removeItem(\"session\");\n  localStorage.removeItem(\"token\");\n\n  await dispatch({\n    type: \"DELETE_SIGN_OUT_SESSION\",\n    payload: response.data,\n  });\n\n  //we can also use getState to get the session id from the state\n  console.log(getState().signOutSession);\n};\n\n//fetch account details\n//we are using the session id that was created earlier by signing in to get user account information\nexport const fetchAccountDetails = () => async (dispatch, getState) => {\n  const response = await TMDB.get(\n    //use local storage to retrieve session id in case of refresh\n    `/account?api_key=${KEY}&session_id=${localStorage.getItem(\"session\")}\n  `,\n  );\n\n  await dispatch({\n    type: \"FETCH_ACCOUNT_DETAILS\",\n    payload: response.data,\n  });\n\n  //we can also use getState to get the session id from the state\n  console.log(getState().accountDetails);\n};\n\n/*\n//fetch favorite movies\nexport const fetchFavoriteMovies = () => async (dispatch, getState) => {\n  const response = await TMDB.get(\n    //use local storage to retrieve session id in case of refresh\n    `/account/${account}/favorite/movies?api_key=80f9558ee00fbe6653d7ee77b88e6eeb&session_id=session&language=en-US\n  `,\n  );\n\n  await dispatch({\n    type: \"FETCH_ACCOUNT_DETAILS\",\n    payload: response.data,\n  });\n\n  //we can also use getState to get the session id from the state\n  console.log(getState().signInSession);\n};*/\n"]},"metadata":{},"sourceType":"module"}