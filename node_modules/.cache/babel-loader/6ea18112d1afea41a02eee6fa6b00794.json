{"ast":null,"code":"var _jsxFileName = \"/Users/cedrickmonesit/Desktop/movie-app/src/components/details/MovieDetails.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FaStar, FaRegStar } from \"react-icons/fa\";\nimport Rating from \"react-rating\";\nimport { fetchMovieDetails, fetchCredits, fetchTrailers, fetchSimilarMovies, fetchGenres } from \"../../actions\";\nimport \"./movieDetails.scss\";\nimport TrailersCarousel from \"./trailerscarousel/TrailersCarousel.js\";\nimport PeopleCarousel from \"./peoplecarousel/PeopleCarousel\";\nimport Carousel from \"../carousel/Carousel\";\nimport renderMovieGenres from \"../renderMovieGenres\";\nimport Loader from \"../loader/Loader\";\n\nclass MovieDetails extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onUpdateShow = prevProps => {\n      if (prevProps.match.params.id !== this.props.match.params.id) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.renderDetails = () => {\n      if (this.props.movie) {\n        return React.createElement(\"div\", {\n          className: \"movie-details\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"movie-details-header\",\n          style: {\n            background: `linear-gradient(0deg, rgb(0, 0, 0) 5%, rgba(0, 0, 0, 0.45) 92%), url(https://image.tmdb.org/t/p/original/${this.props.movie.backdrop_path}) center/cover no-repeat border-box, rgb(255, 255, 255)`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"movie-details-header-info-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"movie-details-poster\",\n          src: `http://image.tmdb.org/t/p/w500/${this.props.movie.poster_path}`,\n          alt: this.props.movie.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"movie-details-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, this.props.movie.title), React.createElement(Rating, {\n          emptySymbol: React.createElement(FaRegStar, {\n            className: \"movie-details-star-rating\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          }),\n          fullSymbol: React.createElement(FaStar, {\n            className: \"movie-details-star-rating\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }),\n          initialRating: this.props.movie.vote_average / 2,\n          readonly: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, `${this.props.movie.status} | ${this.renderDate(this.props.movie.release_date)} |\n                  ${this.props.movie.original_language}`), React.createElement(\"p\", {\n          className: \"movie-details-summary-genres\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, renderMovieGenres(this.props.movie.genres, this.props.genres))))), React.createElement(\"main\", {\n          className: \"movie-details-main\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"movie-details-summary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Summary\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, this.props.movie.overview)), this.renderTrailers(this.props.trailers), this.renderCredits(this.props.credits), this.renderSimilarMovies(this.props.similarMovies)));\n      }\n\n      return;\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  } //checks if props changed compares it to previous props\n  //checks if id is the same as previous id\n  //the props being changed is the id in the URL to make the request to the api using id\n  //scroll to the top\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      this.fetchData();\n    }\n\n    window.scrollTo(0, 0);\n  }\n\n  //make api request using action creators\n  fetchData() {\n    const id = this.props.match.params.id;\n    this.props.fetchMovieDetails(id);\n    this.props.fetchCredits(id);\n    this.props.fetchTrailers(id);\n    this.props.fetchSimilarMovies(id);\n    this.props.fetchGenres();\n    console.log(id);\n  }\n\n  renderSimilarMovies(similarMovies) {\n    if (similarMovies === undefined || similarMovies.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"movie-details-carousel-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"movie-details-main-genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Similar Movies\"), React.createElement(Carousel, {\n      movies: similarMovies,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n  renderTrailers(trailers) {\n    if (trailers === undefined || trailers.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"movie-details-carousel-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"movie-details-main-genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Trailers\"), React.createElement(TrailersCarousel, {\n      trailers: trailers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  } //if credits data have not loaded return nothing\n\n\n  renderCredits(credits) {\n    if (credits === undefined || credits.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"movie-details-carousel-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"movie-details-main-genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Cast\"), React.createElement(PeopleCarousel, {\n      credits: credits,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  } //filter year/month/day from release date\n\n\n  renderDate(releaseDate) {\n    if (releaseDate) {\n      const date = releaseDate.split(\"-\");\n      const year = date[0];\n      return year;\n    }\n\n    return null;\n  }\n\n  render() {\n    console.log(this.props);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      lazyload: true,\n      show: onUpdateShow(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), this.renderDetails());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    movie: state.movieDetails,\n    credits: state.creditsData.cast,\n    trailers: state.trailersData.results,\n    similarMovies: state.similarMoviesData.results,\n    genres: state.genresData.genres\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchMovieDetails,\n  fetchCredits,\n  fetchTrailers,\n  fetchSimilarMovies,\n  fetchGenres\n})(MovieDetails);","map":{"version":3,"sources":["/Users/cedrickmonesit/Desktop/movie-app/src/components/details/MovieDetails.js"],"names":["React","connect","FaStar","FaRegStar","Rating","fetchMovieDetails","fetchCredits","fetchTrailers","fetchSimilarMovies","fetchGenres","TrailersCarousel","PeopleCarousel","Carousel","renderMovieGenres","Loader","MovieDetails","Component","onUpdateShow","prevProps","match","params","id","props","renderDetails","movie","background","backdrop_path","poster_path","title","vote_average","status","renderDate","release_date","original_language","genres","overview","renderTrailers","trailers","renderCredits","credits","renderSimilarMovies","similarMovies","componentDidMount","fetchData","componentDidUpdate","window","scrollTo","console","log","undefined","length","releaseDate","date","split","year","render","mapStateToProps","state","movieDetails","creditsData","cast","trailersData","results","similarMoviesData","genresData"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FaStar, FaRegStar } from \"react-icons/fa\";\nimport Rating from \"react-rating\";\n\nimport {\n  fetchMovieDetails,\n  fetchCredits,\n  fetchTrailers,\n  fetchSimilarMovies,\n  fetchGenres,\n} from \"../../actions\";\nimport \"./movieDetails.scss\";\nimport TrailersCarousel from \"./trailerscarousel/TrailersCarousel.js\";\nimport PeopleCarousel from \"./peoplecarousel/PeopleCarousel\";\nimport Carousel from \"../carousel/Carousel\";\nimport renderMovieGenres from \"../renderMovieGenres\";\nimport Loader from \"../loader/Loader\";\n\nclass MovieDetails extends React.Component {\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  //checks if props changed compares it to previous props\n  //checks if id is the same as previous id\n  //the props being changed is the id in the URL to make the request to the api using id\n  //scroll to the top\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      this.fetchData();\n    }\n    window.scrollTo(0, 0);\n  }\n\n  onUpdateShow = (prevProps) => {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      return true;\n    }\n    return false;\n  };\n\n  //make api request using action creators\n  fetchData() {\n    const id = this.props.match.params.id;\n    this.props.fetchMovieDetails(id);\n    this.props.fetchCredits(id);\n    this.props.fetchTrailers(id);\n    this.props.fetchSimilarMovies(id);\n    this.props.fetchGenres();\n    console.log(id);\n  }\n\n  renderSimilarMovies(similarMovies) {\n    if (similarMovies === undefined || similarMovies.length === 0) {\n      return null;\n    }\n    return (\n      <div className=\"movie-details-carousel-container\">\n        <h1 className=\"movie-details-main-genre\">Similar Movies</h1>\n        <Carousel movies={similarMovies} />\n      </div>\n    );\n  }\n\n  renderTrailers(trailers) {\n    if (trailers === undefined || trailers.length === 0) {\n      return null;\n    }\n    return (\n      <div className=\"movie-details-carousel-container\">\n        <h1 className=\"movie-details-main-genre\">Trailers</h1>\n        <TrailersCarousel trailers={trailers} />\n      </div>\n    );\n  }\n\n  //if credits data have not loaded return nothing\n  renderCredits(credits) {\n    if (credits === undefined || credits.length === 0) {\n      return null;\n    }\n    return (\n      <div className=\"movie-details-carousel-container\">\n        <h1 className=\"movie-details-main-genre\">Cast</h1>\n        <PeopleCarousel credits={credits} />\n      </div>\n    );\n  }\n\n  //filter year/month/day from release date\n  renderDate(releaseDate) {\n    if (releaseDate) {\n      const date = releaseDate.split(\"-\");\n      const year = date[0];\n      return year;\n    }\n    return null;\n  }\n\n  renderDetails = () => {\n    if (this.props.movie) {\n      return (\n        <div className=\"movie-details\">\n          <header\n            className=\"movie-details-header\"\n            style={{\n              background: `linear-gradient(0deg, rgb(0, 0, 0) 5%, rgba(0, 0, 0, 0.45) 92%), url(https://image.tmdb.org/t/p/original/${this.props.movie.backdrop_path}) center/cover no-repeat border-box, rgb(255, 255, 255)`,\n            }}\n          >\n            <div className=\"movie-details-header-info-container\">\n              <img\n                className=\"movie-details-poster\"\n                src={`http://image.tmdb.org/t/p/w500/${this.props.movie.poster_path}`}\n                alt={this.props.movie.title}\n              />\n              <div className=\"movie-details-title\">\n                <h1>{this.props.movie.title}</h1>\n                <Rating\n                  emptySymbol={\n                    <FaRegStar className=\"movie-details-star-rating\" />\n                  }\n                  fullSymbol={<FaStar className=\"movie-details-star-rating\" />}\n                  initialRating={this.props.movie.vote_average / 2}\n                  readonly\n                />\n                <p>\n                  {`${this.props.movie.status} | ${this.renderDate(\n                    this.props.movie.release_date,\n                  )} |\n                  ${this.props.movie.original_language}`}\n                </p>\n                <p className=\"movie-details-summary-genres\">\n                  {renderMovieGenres(\n                    this.props.movie.genres,\n                    this.props.genres,\n                  )}\n                </p>\n              </div>\n            </div>\n          </header>\n          <main className=\"movie-details-main\">\n            <div className=\"movie-details-summary\">\n              <h2>Summary</h2>\n              <p>{this.props.movie.overview}</p>\n            </div>\n\n            {this.renderTrailers(this.props.trailers)}\n\n            {this.renderCredits(this.props.credits)}\n\n            {this.renderSimilarMovies(this.props.similarMovies)}\n          </main>\n        </div>\n      );\n    }\n    return;\n  };\n  render() {\n    console.log(this.props);\n    return (\n      <React.Fragment>\n        <Loader lazyload={true} show={onUpdateShow()} />\n        {this.renderDetails()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    movie: state.movieDetails,\n    credits: state.creditsData.cast,\n    trailers: state.trailersData.results,\n    similarMovies: state.similarMoviesData.results,\n    genres: state.genresData.genres,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchMovieDetails,\n  fetchCredits,\n  fetchTrailers,\n  fetchSimilarMovies,\n  fetchGenres,\n})(MovieDetails);\n"]},"metadata":{},"sourceType":"module"}