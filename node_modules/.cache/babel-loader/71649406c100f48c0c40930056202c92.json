{"ast":null,"code":"function AxiosRateLimit(axios) {\n  this.queue = [];\n  this.timeslotRequests = 0;\n  this.interceptors = {\n    request: null,\n    response: null\n  };\n  this.handleRequest = this.handleRequest.bind(this);\n  this.handleResponse = this.handleResponse.bind(this);\n  this.enable(axios);\n}\n\nAxiosRateLimit.prototype.getMaxRPS = function () {\n  var perSeconds = this.perMilliseconds / 1000;\n  return this.maxRequests / perSeconds;\n};\n\nAxiosRateLimit.prototype.setMaxRPS = function (rps) {\n  this.setRateLimitOptions({\n    maxRequests: rps,\n    perMilliseconds: 1000\n  });\n};\n\nAxiosRateLimit.prototype.setRateLimitOptions = function (options) {\n  if (options.maxRPS) {\n    this.setMaxRPS(options.maxRPS);\n  } else {\n    this.perMilliseconds = options.perMilliseconds;\n    this.maxRequests = options.maxRequests;\n  }\n};\n\nAxiosRateLimit.prototype.enable = function (axios) {\n  function handleError(error) {\n    return Promise.reject(error);\n  }\n\n  this.interceptors.request = axios.interceptors.request.use(this.handleRequest, handleError);\n  this.interceptors.response = axios.interceptors.response.use(this.handleResponse, handleError);\n};\n\nAxiosRateLimit.prototype.handleRequest = function (request) {\n  return new Promise(function (_resolve) {\n    this.push({\n      resolve: function resolve() {\n        _resolve(request);\n      }\n    });\n  }.bind(this));\n};\n\nAxiosRateLimit.prototype.handleResponse = function (response) {\n  this.shift();\n  return response;\n};\n\nAxiosRateLimit.prototype.push = function (requestHandler) {\n  this.queue.push(requestHandler);\n  this.shiftInitial();\n};\n\nAxiosRateLimit.prototype.shiftInitial = function () {\n  setTimeout(function () {\n    return this.shift();\n  }.bind(this), 0);\n};\n\nAxiosRateLimit.prototype.shift = function () {\n  if (!this.queue.length) return;\n\n  if (this.timeslotRequests === this.maxRequests) {\n    if (this.timeoutId && typeof this.timeoutId.ref === 'function') {\n      this.timeoutId.ref();\n    }\n\n    return;\n  }\n\n  var queued = this.queue.shift();\n  queued.resolve();\n\n  if (this.timeslotRequests === 0) {\n    this.timeoutId = setTimeout(function () {\n      this.timeslotRequests = 0;\n      this.shift();\n    }.bind(this), this.perMilliseconds);\n\n    if (typeof this.timeoutId.unref === 'function') {\n      if (this.queue.length === 0) this.timeoutId.unref();\n    }\n  }\n\n  this.timeslotRequests += 1;\n};\n/**\n * Apply rate limit to axios instance.\n *\n * @example\n *   import axios from 'axios';\n *   import rateLimit from 'axios-rate-limit';\n *\n *   // sets max 2 requests per 1 second, other will be delayed\n *   // note maxRPS is a shorthand for perMilliseconds: 1000, and it takes precedence\n *   // if specified both with maxRequests and perMilliseconds\n *   const http = rateLimit(axios.create(), { maxRequests: 2, perMilliseconds: 1000, maxRPS: 2 })\n*    http.getMaxRPS() // 2\n *   http.get('https://example.com/api/v1/users.json?page=1') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=2') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=3') // will perform after 1 second from the first one\n *   http.setMaxRPS(3)\n *   http.getMaxRPS() // 3\n *   http.setRateLimitOptions({ maxRequests: 6, perMilliseconds: 150 }) // same options as constructor\n *\n * @param {Object} axios axios instance\n * @param {Object} options options for rate limit, available for live update\n * @param {Number} options.maxRequests max requests to perform concurrently in given amount of time.\n * @param {Number} options.perMilliseconds amount of time to limit concurrent requests.\n * @returns {Object} axios instance with interceptors added\n */\n\n\nfunction axiosRateLimit(axios, options) {\n  var rateLimitInstance = new AxiosRateLimit(axios);\n  rateLimitInstance.setRateLimitOptions(options);\n  axios.getMaxRPS = AxiosRateLimit.prototype.getMaxRPS.bind(rateLimitInstance);\n  axios.setMaxRPS = AxiosRateLimit.prototype.setMaxRPS.bind(rateLimitInstance);\n  axios.setRateLimitOptions = AxiosRateLimit.prototype.setRateLimitOptions.bind(rateLimitInstance);\n  return axios;\n}\n\nmodule.exports = axiosRateLimit;","map":{"version":3,"names":["AxiosRateLimit","axios","queue","timeslotRequests","interceptors","request","response","handleRequest","bind","handleResponse","enable","prototype","getMaxRPS","perSeconds","perMilliseconds","maxRequests","setMaxRPS","rps","setRateLimitOptions","options","maxRPS","handleError","error","Promise","reject","use","resolve","push","shift","requestHandler","shiftInitial","setTimeout","length","timeoutId","ref","queued","unref","axiosRateLimit","rateLimitInstance","module","exports"],"sources":["/Users/cedrickmonesit/Documents/GitHub/film-flix-client/node_modules/axios-rate-limit/src/index.js"],"sourcesContent":["function AxiosRateLimit (axios) {\n  this.queue = []\n  this.timeslotRequests = 0\n\n  this.interceptors = {\n    request: null,\n    response: null\n  }\n\n  this.handleRequest = this.handleRequest.bind(this)\n  this.handleResponse = this.handleResponse.bind(this)\n\n  this.enable(axios)\n}\n\nAxiosRateLimit.prototype.getMaxRPS = function () {\n  var perSeconds = (this.perMilliseconds / 1000)\n  return this.maxRequests / perSeconds\n}\n\nAxiosRateLimit.prototype.setMaxRPS = function (rps) {\n  this.setRateLimitOptions({\n    maxRequests: rps,\n    perMilliseconds: 1000\n  })\n}\n\nAxiosRateLimit.prototype.setRateLimitOptions = function (options) {\n  if (options.maxRPS) {\n    this.setMaxRPS(options.maxRPS)\n  } else {\n    this.perMilliseconds = options.perMilliseconds\n    this.maxRequests = options.maxRequests\n  }\n}\n\nAxiosRateLimit.prototype.enable = function (axios) {\n  function handleError (error) {\n    return Promise.reject(error)\n  }\n\n  this.interceptors.request = axios.interceptors.request.use(\n    this.handleRequest,\n    handleError\n  )\n  this.interceptors.response = axios.interceptors.response.use(\n    this.handleResponse,\n    handleError\n  )\n}\n\nAxiosRateLimit.prototype.handleRequest = function (request) {\n  return new Promise(function (resolve) {\n    this.push({ resolve: function () { resolve(request) } })\n  }.bind(this))\n}\n\nAxiosRateLimit.prototype.handleResponse = function (response) {\n  this.shift()\n  return response\n}\n\nAxiosRateLimit.prototype.push = function (requestHandler) {\n  this.queue.push(requestHandler)\n  this.shiftInitial()\n}\n\nAxiosRateLimit.prototype.shiftInitial = function () {\n  setTimeout(function () { return this.shift() }.bind(this), 0)\n}\n\nAxiosRateLimit.prototype.shift = function () {\n  if (!this.queue.length) return\n  if (this.timeslotRequests === this.maxRequests) {\n    if (this.timeoutId && typeof this.timeoutId.ref === 'function') {\n      this.timeoutId.ref()\n    }\n\n    return\n  }\n\n  var queued = this.queue.shift()\n  queued.resolve()\n\n  if (this.timeslotRequests === 0) {\n    this.timeoutId = setTimeout(function () {\n      this.timeslotRequests = 0\n      this.shift()\n    }.bind(this), this.perMilliseconds)\n\n    if (typeof this.timeoutId.unref === 'function') {\n      if (this.queue.length === 0) this.timeoutId.unref()\n    }\n  }\n\n  this.timeslotRequests += 1\n}\n\n/**\n * Apply rate limit to axios instance.\n *\n * @example\n *   import axios from 'axios';\n *   import rateLimit from 'axios-rate-limit';\n *\n *   // sets max 2 requests per 1 second, other will be delayed\n *   // note maxRPS is a shorthand for perMilliseconds: 1000, and it takes precedence\n *   // if specified both with maxRequests and perMilliseconds\n *   const http = rateLimit(axios.create(), { maxRequests: 2, perMilliseconds: 1000, maxRPS: 2 })\n*    http.getMaxRPS() // 2\n *   http.get('https://example.com/api/v1/users.json?page=1') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=2') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=3') // will perform after 1 second from the first one\n *   http.setMaxRPS(3)\n *   http.getMaxRPS() // 3\n *   http.setRateLimitOptions({ maxRequests: 6, perMilliseconds: 150 }) // same options as constructor\n *\n * @param {Object} axios axios instance\n * @param {Object} options options for rate limit, available for live update\n * @param {Number} options.maxRequests max requests to perform concurrently in given amount of time.\n * @param {Number} options.perMilliseconds amount of time to limit concurrent requests.\n * @returns {Object} axios instance with interceptors added\n */\nfunction axiosRateLimit (axios, options) {\n  var rateLimitInstance = new AxiosRateLimit(axios)\n  rateLimitInstance.setRateLimitOptions(options)\n\n  axios.getMaxRPS = AxiosRateLimit.prototype.getMaxRPS.bind(rateLimitInstance)\n  axios.setMaxRPS = AxiosRateLimit.prototype.setMaxRPS.bind(rateLimitInstance)\n  axios.setRateLimitOptions = AxiosRateLimit.prototype.setRateLimitOptions\n    .bind(rateLimitInstance)\n\n  return axios\n}\n\nmodule.exports = axiosRateLimit\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}