{"ast":null,"code":"var _jsxFileName = \"/Users/cedrickmonesit/Desktop/movie-app/src/components/details/MovieDetails.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FaStar, FaRegStar, FaHeart } from \"react-icons/fa\";\nimport Rating from \"react-rating\";\nimport { fetchMovieDetails, fetchCredits, fetchTrailers, fetchSimilarMovies, fetchGenres, postFavorite } from \"../../actions\";\nimport \"./movieDetails.scss\";\nimport TrailersCarousel from \"./trailerscarousel/TrailersCarousel.js\";\nimport PeopleCarousel from \"./peoplecarousel/PeopleCarousel\";\nimport Carousel from \"../carousel/Carousel\";\nimport renderMovieGenres from \"../renderMovieGenres\"; //import Loader from \"../loader/Loader\";\n\nclass MovieDetails extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClickAddToFavorites = () => {\n      console.log(\"Added to favorites\");\n      const id = this.props.match.params.id; //post action creator to add to favorite movies list\n\n      this.props.postFavorite(id, \"movie\", true); //changes color to secondary after clicked\n\n      document.querySelector(\".details-fav-heart\").style.color = \"#fe346e\";\n    };\n\n    this.renderDetails = () => {\n      if (this.props.movie) {\n        return React.createElement(\"div\", {\n          className: \"movie-details\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"movie-details-header\",\n          style: {\n            background: `linear-gradient(0deg, rgb(0, 0, 0) 5%, rgba(0, 0, 0, 0.45) 92%), url(https://image.tmdb.org/t/p/original/${this.props.movie.backdrop_path}) center/cover no-repeat border-box, rgb(255, 255, 255)`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"movie-details-header-info-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"movie-details-poster\",\n          src: `http://image.tmdb.org/t/p/w500/${this.props.movie.poster_path}`,\n          alt: this.props.movie.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"movie-details-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, this.props.movie.title), React.createElement(Rating, {\n          emptySymbol: React.createElement(FaRegStar, {\n            className: \"movie-details-star-rating\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }),\n          fullSymbol: React.createElement(FaStar, {\n            className: \"movie-details-star-rating\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }),\n          initialRating: this.props.movie.vote_average / 2,\n          readonly: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }), React.createElement(FaHeart, {\n          className: \"icon details-fav-heart\",\n          onClick: this.onClickAddToFavorites,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, `${this.props.movie.status} | ${this.renderDate(this.props.movie.release_date)} |\n                  ${this.props.movie.original_language}`), React.createElement(\"p\", {\n          className: \"movie-details-summary-genres\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, renderMovieGenres(this.props.movie.genres, this.props.genres))))), React.createElement(\"main\", {\n          className: \"movie-details-main\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"movie-details-summary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          className: \"wow slideInLeft delay-0.5s\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, \"Summary\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, this.props.movie.overview)), this.renderTrailers(this.props.trailers), this.renderCredits(this.props.credits), this.renderSimilarMovies(this.props.similarMovies)));\n      }\n\n      return;\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  } //checks if props changed compares it to previous props\n  //checks if id is the same as previous id\n  //the props being changed is the id in the URL to make the request to the api using id\n  //scroll to the top\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      this.fetchData();\n    }\n\n    window.scrollTo(0, 0);\n  } //make api request using action creators\n\n\n  fetchData() {\n    const id = this.props.match.params.id;\n    this.props.fetchMovieDetails(id);\n    this.props.fetchCredits(id);\n    this.props.fetchTrailers(id);\n    this.props.fetchSimilarMovies(id);\n    this.props.fetchGenres();\n    console.log(id);\n  }\n\n  renderSimilarMovies(similarMovies) {\n    if (similarMovies === undefined || similarMovies.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"movie-details-carousel-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"movie-details-main-genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Similar Movies\"), React.createElement(Carousel, {\n      movies: similarMovies,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n  renderTrailers(trailers) {\n    if (trailers === undefined || trailers.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"movie-details-carousel-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"movie-details-main-genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Trailers\"), React.createElement(TrailersCarousel, {\n      trailers: trailers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  } //if credits data have not loaded return nothing\n\n\n  renderCredits(credits) {\n    if (credits === undefined || credits.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"movie-details-carousel-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"movie-details-main-genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Cast\"), React.createElement(PeopleCarousel, {\n      credits: credits,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }));\n  } //filter year/month/day from release date\n\n\n  renderDate(releaseDate) {\n    if (releaseDate) {\n      const date = releaseDate.split(\"-\");\n      const year = date[0];\n      return year;\n    }\n\n    return null;\n  } //this method is a callback function from onclick so it must be an arrow function\n\n\n  render() {\n    console.log(this.props.status);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.renderDetails());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    movie: state.movieDetails,\n    credits: state.creditsData.cast,\n    trailers: state.trailersData.results,\n    similarMovies: state.similarMoviesData.results,\n    genres: state.genresData.genres,\n    status: state.postFavoriteStatus.status_message\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchMovieDetails,\n  fetchCredits,\n  fetchTrailers,\n  fetchSimilarMovies,\n  fetchGenres,\n  postFavorite\n})(MovieDetails);","map":{"version":3,"sources":["/Users/cedrickmonesit/Desktop/movie-app/src/components/details/MovieDetails.js"],"names":["React","connect","FaStar","FaRegStar","FaHeart","Rating","fetchMovieDetails","fetchCredits","fetchTrailers","fetchSimilarMovies","fetchGenres","postFavorite","TrailersCarousel","PeopleCarousel","Carousel","renderMovieGenres","MovieDetails","Component","onClickAddToFavorites","console","log","id","props","match","params","document","querySelector","style","color","renderDetails","movie","background","backdrop_path","poster_path","title","vote_average","status","renderDate","release_date","original_language","genres","overview","renderTrailers","trailers","renderCredits","credits","renderSimilarMovies","similarMovies","componentDidMount","fetchData","componentDidUpdate","prevProps","window","scrollTo","undefined","length","releaseDate","date","split","year","render","mapStateToProps","state","movieDetails","creditsData","cast","trailersData","results","similarMoviesData","genresData","postFavoriteStatus","status_message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,gBAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SACEC,iBADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,kBAJF,EAKEC,WALF,EAMEC,YANF,QAOO,eAPP;AAQA,OAAO,qBAAP;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,iBAAP,MAA8B,sBAA9B,C,CACA;;AAEA,MAAMC,YAAN,SAA2BhB,KAAK,CAACiB,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SA2EzCC,qBA3EyC,GA2EjB,MAAM;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,YAAMC,EAAE,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAAnC,CAF4B,CAG5B;;AACA,WAAKC,KAAL,CAAWX,YAAX,CAAwBU,EAAxB,EAA4B,OAA5B,EAAqC,IAArC,EAJ4B,CAK5B;;AACAI,MAAAA,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,EAA6CC,KAA7C,CAAmDC,KAAnD,GAA2D,SAA3D;AACD,KAlFwC;;AAAA,SAoFzCC,aApFyC,GAoFzB,MAAM;AACpB,UAAI,KAAKP,KAAL,CAAWQ,KAAf,EAAsB;AACpB,eACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AACE,UAAA,SAAS,EAAC,sBADZ;AAEE,UAAA,KAAK,EAAE;AACLC,YAAAA,UAAU,EAAG,4GAA2G,KAAKT,KAAL,CAAWQ,KAAX,CAAiBE,aAAc;AADlJ,WAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME;AAAK,UAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AACE,UAAA,SAAS,EAAC,sBADZ;AAEE,UAAA,GAAG,EAAG,kCAAiC,KAAKV,KAAL,CAAWQ,KAAX,CAAiBG,WAAY,EAFtE;AAGE,UAAA,GAAG,EAAE,KAAKX,KAAL,CAAWQ,KAAX,CAAiBI,KAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAME;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,KAAKZ,KAAL,CAAWQ,KAAX,CAAiBI,KAAtB,CADF,EAEE,oBAAC,MAAD;AACE,UAAA,WAAW,EACT,oBAAC,SAAD;AAAW,YAAA,SAAS,EAAC,2BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAIE,UAAA,UAAU,EAAE,oBAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,2BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJd;AAKE,UAAA,aAAa,EAAE,KAAKZ,KAAL,CAAWQ,KAAX,CAAiBK,YAAjB,GAAgC,CALjD;AAME,UAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EAUE,oBAAC,OAAD;AACE,UAAA,SAAS,EAAC,wBADZ;AAEE,UAAA,OAAO,EAAE,KAAKjB,qBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,GAAE,KAAKI,KAAL,CAAWQ,KAAX,CAAiBM,MAAO,MAAK,KAAKC,UAAL,CAC/B,KAAKf,KAAL,CAAWQ,KAAX,CAAiBQ,YADc,CAE/B;oBACA,KAAKhB,KAAL,CAAWQ,KAAX,CAAiBS,iBAAkB,EAJvC,CAdF,EAoBE;AAAG,UAAA,SAAS,EAAC,8BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGxB,iBAAiB,CAChB,KAAKO,KAAL,CAAWQ,KAAX,CAAiBU,MADD,EAEhB,KAAKlB,KAAL,CAAWkB,MAFK,CADpB,CApBF,CANF,CANF,CADF,EA0CE;AAAM,UAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAI,UAAA,SAAS,EAAC,4BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,KAAKlB,KAAL,CAAWQ,KAAX,CAAiBW,QAArB,CAFF,CADF,EAMG,KAAKC,cAAL,CAAoB,KAAKpB,KAAL,CAAWqB,QAA/B,CANH,EAQG,KAAKC,aAAL,CAAmB,KAAKtB,KAAL,CAAWuB,OAA9B,CARH,EAUG,KAAKC,mBAAL,CAAyB,KAAKxB,KAAL,CAAWyB,aAApC,CAVH,CA1CF,CADF;AAyDD;;AACD;AACD,KAjJwC;AAAA;;AACzCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,SAAL;AACD,GAHwC,CAKzC;AACA;AACA;AACA;;;AACAC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAIA,SAAS,CAAC5B,KAAV,CAAgBC,MAAhB,CAAuBH,EAAvB,KAA8B,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAA1D,EAA8D;AAC5D,WAAK4B,SAAL;AACD;;AACDG,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACD,GAdwC,CAgBzC;;;AACAJ,EAAAA,SAAS,GAAG;AACV,UAAM5B,EAAE,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAAnC;AACA,SAAKC,KAAL,CAAWhB,iBAAX,CAA6Be,EAA7B;AACA,SAAKC,KAAL,CAAWf,YAAX,CAAwBc,EAAxB;AACA,SAAKC,KAAL,CAAWd,aAAX,CAAyBa,EAAzB;AACA,SAAKC,KAAL,CAAWb,kBAAX,CAA8BY,EAA9B;AACA,SAAKC,KAAL,CAAWZ,WAAX;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;AACD;;AAEDyB,EAAAA,mBAAmB,CAACC,aAAD,EAAgB;AACjC,QAAIA,aAAa,KAAKO,SAAlB,IAA+BP,aAAa,CAACQ,MAAd,KAAyB,CAA5D,EAA+D;AAC7D,aAAO,IAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,0BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAER,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAEDL,EAAAA,cAAc,CAACC,QAAD,EAAW;AACvB,QAAIA,QAAQ,KAAKW,SAAb,IAA0BX,QAAQ,CAACY,MAAT,KAAoB,CAAlD,EAAqD;AACnD,aAAO,IAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,0BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,oBAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAEZ,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GAjDwC,CAmDzC;;;AACAC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrB,QAAIA,OAAO,KAAKS,SAAZ,IAAyBT,OAAO,CAACU,MAAR,KAAmB,CAAhD,EAAmD;AACjD,aAAO,IAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,0BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,oBAAC,cAAD;AAAgB,MAAA,OAAO,EAAEV,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GA9DwC,CAgEzC;;;AACAR,EAAAA,UAAU,CAACmB,WAAD,EAAc;AACtB,QAAIA,WAAJ,EAAiB;AACf,YAAMC,IAAI,GAAGD,WAAW,CAACE,KAAZ,CAAkB,GAAlB,CAAb;AACA,YAAMC,IAAI,GAAGF,IAAI,CAAC,CAAD,CAAjB;AACA,aAAOE,IAAP;AACD;;AACD,WAAO,IAAP;AACD,GAxEwC,CA0EzC;;;AAwEAC,EAAAA,MAAM,GAAG;AACPzC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,KAAL,CAAWc,MAAvB;AACA,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAKP,aAAL,EAFH,CADF;AAMD;;AA1JwC;;AA6J3C,MAAMgC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLhC,IAAAA,KAAK,EAAEgC,KAAK,CAACC,YADR;AAELlB,IAAAA,OAAO,EAAEiB,KAAK,CAACE,WAAN,CAAkBC,IAFtB;AAGLtB,IAAAA,QAAQ,EAAEmB,KAAK,CAACI,YAAN,CAAmBC,OAHxB;AAILpB,IAAAA,aAAa,EAAEe,KAAK,CAACM,iBAAN,CAAwBD,OAJlC;AAKL3B,IAAAA,MAAM,EAAEsB,KAAK,CAACO,UAAN,CAAiB7B,MALpB;AAMLJ,IAAAA,MAAM,EAAE0B,KAAK,CAACQ,kBAAN,CAAyBC;AAN5B,GAAP;AAQD,CATD;;AAWA,eAAetE,OAAO,CAAC4D,eAAD,EAAkB;AACtCvD,EAAAA,iBADsC;AAEtCC,EAAAA,YAFsC;AAGtCC,EAAAA,aAHsC;AAItCC,EAAAA,kBAJsC;AAKtCC,EAAAA,WALsC;AAMtCC,EAAAA;AANsC,CAAlB,CAAP,CAOZK,YAPY,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FaStar, FaRegStar, FaHeart } from \"react-icons/fa\";\nimport Rating from \"react-rating\";\n\nimport {\n  fetchMovieDetails,\n  fetchCredits,\n  fetchTrailers,\n  fetchSimilarMovies,\n  fetchGenres,\n  postFavorite,\n} from \"../../actions\";\nimport \"./movieDetails.scss\";\nimport TrailersCarousel from \"./trailerscarousel/TrailersCarousel.js\";\nimport PeopleCarousel from \"./peoplecarousel/PeopleCarousel\";\nimport Carousel from \"../carousel/Carousel\";\nimport renderMovieGenres from \"../renderMovieGenres\";\n//import Loader from \"../loader/Loader\";\n\nclass MovieDetails extends React.Component {\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  //checks if props changed compares it to previous props\n  //checks if id is the same as previous id\n  //the props being changed is the id in the URL to make the request to the api using id\n  //scroll to the top\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      this.fetchData();\n    }\n    window.scrollTo(0, 0);\n  }\n\n  //make api request using action creators\n  fetchData() {\n    const id = this.props.match.params.id;\n    this.props.fetchMovieDetails(id);\n    this.props.fetchCredits(id);\n    this.props.fetchTrailers(id);\n    this.props.fetchSimilarMovies(id);\n    this.props.fetchGenres();\n    console.log(id);\n  }\n\n  renderSimilarMovies(similarMovies) {\n    if (similarMovies === undefined || similarMovies.length === 0) {\n      return null;\n    }\n    return (\n      <div className=\"movie-details-carousel-container\">\n        <h1 className=\"movie-details-main-genre\">Similar Movies</h1>\n        <Carousel movies={similarMovies} />\n      </div>\n    );\n  }\n\n  renderTrailers(trailers) {\n    if (trailers === undefined || trailers.length === 0) {\n      return null;\n    }\n    return (\n      <div className=\"movie-details-carousel-container\">\n        <h1 className=\"movie-details-main-genre\">Trailers</h1>\n        <TrailersCarousel trailers={trailers} />\n      </div>\n    );\n  }\n\n  //if credits data have not loaded return nothing\n  renderCredits(credits) {\n    if (credits === undefined || credits.length === 0) {\n      return null;\n    }\n    return (\n      <div className=\"movie-details-carousel-container\">\n        <h1 className=\"movie-details-main-genre\">Cast</h1>\n        <PeopleCarousel credits={credits} />\n      </div>\n    );\n  }\n\n  //filter year/month/day from release date\n  renderDate(releaseDate) {\n    if (releaseDate) {\n      const date = releaseDate.split(\"-\");\n      const year = date[0];\n      return year;\n    }\n    return null;\n  }\n\n  //this method is a callback function from onclick so it must be an arrow function\n  onClickAddToFavorites = () => {\n    console.log(\"Added to favorites\");\n    const id = this.props.match.params.id;\n    //post action creator to add to favorite movies list\n    this.props.postFavorite(id, \"movie\", true);\n    //changes color to secondary after clicked\n    document.querySelector(\".details-fav-heart\").style.color = \"#fe346e\";\n  };\n\n  renderDetails = () => {\n    if (this.props.movie) {\n      return (\n        <div className=\"movie-details\">\n          <header\n            className=\"movie-details-header\"\n            style={{\n              background: `linear-gradient(0deg, rgb(0, 0, 0) 5%, rgba(0, 0, 0, 0.45) 92%), url(https://image.tmdb.org/t/p/original/${this.props.movie.backdrop_path}) center/cover no-repeat border-box, rgb(255, 255, 255)`,\n            }}\n          >\n            <div className=\"movie-details-header-info-container\">\n              <img\n                className=\"movie-details-poster\"\n                src={`http://image.tmdb.org/t/p/w500/${this.props.movie.poster_path}`}\n                alt={this.props.movie.title}\n              />\n              <div className=\"movie-details-title\">\n                <h1>{this.props.movie.title}</h1>\n                <Rating\n                  emptySymbol={\n                    <FaRegStar className=\"movie-details-star-rating\" />\n                  }\n                  fullSymbol={<FaStar className=\"movie-details-star-rating\" />}\n                  initialRating={this.props.movie.vote_average / 2}\n                  readonly\n                />\n                <FaHeart\n                  className=\"icon details-fav-heart\"\n                  onClick={this.onClickAddToFavorites}\n                />\n                <p>\n                  {`${this.props.movie.status} | ${this.renderDate(\n                    this.props.movie.release_date,\n                  )} |\n                  ${this.props.movie.original_language}`}\n                </p>\n                <p className=\"movie-details-summary-genres\">\n                  {renderMovieGenres(\n                    this.props.movie.genres,\n                    this.props.genres,\n                  )}\n                </p>\n              </div>\n            </div>\n          </header>\n          <main className=\"movie-details-main\">\n            <div className=\"movie-details-summary\">\n              <h2 className=\"wow slideInLeft delay-0.5s\">Summary</h2>\n              <p>{this.props.movie.overview}</p>\n            </div>\n\n            {this.renderTrailers(this.props.trailers)}\n\n            {this.renderCredits(this.props.credits)}\n\n            {this.renderSimilarMovies(this.props.similarMovies)}\n          </main>\n        </div>\n      );\n    }\n    return;\n  };\n  render() {\n    console.log(this.props.status);\n    return (\n      <React.Fragment>\n        {/*<Loader lazyload={true} />*/}\n        {this.renderDetails()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    movie: state.movieDetails,\n    credits: state.creditsData.cast,\n    trailers: state.trailersData.results,\n    similarMovies: state.similarMoviesData.results,\n    genres: state.genresData.genres,\n    status: state.postFavoriteStatus.status_message,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchMovieDetails,\n  fetchCredits,\n  fetchTrailers,\n  fetchSimilarMovies,\n  fetchGenres,\n  postFavorite,\n})(MovieDetails);\n"]},"metadata":{},"sourceType":"module"}